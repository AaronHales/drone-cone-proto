# Generated by Django 4.2.3 on 2023-10-26 03:40

from django.db import migrations

CONE_TYPES = [
    {
        "name": "Waffle",
        "unit_cost": 48, # https://www.amazon.com/Large-Size-Cream-Waffle-Cone/dp/B07JZJ883C/
        "image_url": "#",
    },
    {
        "name": "Cake",
        "unit_cost": 16, # https://www.amazon.com/Keebler-Cones-Cake-Pack-600/dp/B07PWZXYBX/
        "image_url": "#",
    },
]

ICE_CREAM_TYPES = [
    {
        "name": "Vanilla",
        "unit_cost": 21, # https://www.walmart.com/ip/Great-Value-Vanilla-Ice-Cream-1-Gallon/455193695/
        "image_url": "#",
    },
    {
        "name": "Chocolate",
        "unit_cost": 21, # https://www.walmart.com/ip/Great-Value-Chocolate-Ice-Cream-1-Gallon/256249194/
        "image_url": "#",
    },
    {
        "name": "Strawberry",
        "unit_cost": 21, # ¯\_(ツ)_/¯
        "image_url": "#",
    },
    {
        "name": "Cookies + Creme",
        "unit_cost": 21, # ¯\_(ツ)_/¯
        "image_url": "#",
    },
    {
        "name": "Mint + Chip",
        "unit_cost": 21, # ¯\_(ツ)_/¯
        "image_url": "#",
    },
]

TOPPING_TYPES = [
    {
        "name": "No topping",
        "unit_cost": 0,
        "image_url": "#",
    },
    {
        "name": "Chocolate Sprinkles",
        "unit_cost": 7, # https://www.amazon.com/Chocolate-Sprinkles-Flavored-Resealable-Container/dp/B072KL63T3/
        "image_url": "#",
    },
    {
        "name": "Whipped Cream",
        "unit_cost": 9, # https://www.amazon.com/365-Everyday-Value-Dairy-Whipped/dp/B074H7NP9V/
        "image_url": "#",
    },
    {
        "name": "Chocolate Sauce",
        "unit_cost": 8, # https://www.amazon.com/HERSHEYS-Chocolate-Syrup-Pound-Ounce/dp/B001SGZ5VO/
        "image_url": "#",
    },
    {
        "name": "Cherry",
        "unit_cost": 10, # https://www.amazon.com/Regal-oz-Maraschino-Cherries-Stems/dp/B07JZJ46R7/
        "image_url": "#",
    },
]

treat_arrays = [CONE_TYPES, ICE_CREAM_TYPES, TOPPING_TYPES]
model_names = ["ConeType", "IceCreamType", "ToppingType"]

def populate(apps, schema_editor):
    for treats, model_name in zip(treat_arrays, model_names):
        model = apps.get_model("api", model_name)
        for treat in treats:
            model(
                name=treat["name"],
                unit_cost=treat["unit_cost"],
                image_url=treat["image_url"],
            ).save()

class Migration(migrations.Migration):

    dependencies = [
        ('api', '0004_populate_OrderStatus'),
    ]

    operations = [
        migrations.RunPython(populate)
    ]
